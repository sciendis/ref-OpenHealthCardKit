// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NFCCardReaderProvider
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CardReaderProviderApi
import Combine
import CoreNFC
import Foundation
import HealthCardAccess
import HealthCardControl
import Helper
import OSLog
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@frozen public enum CoreNFCError : Swift.Error {
  case tagConnectionLost(CoreNFC.NFCReaderError)
  case sessionTimeout(CoreNFC.NFCReaderError)
  case sessionInvalidated(CoreNFC.NFCReaderError)
  case userCanceled(CoreNFC.NFCReaderError)
  case unsupportedFeature(CoreNFC.NFCReaderError)
  case other(CoreNFC.NFCReaderError)
  case unknown(any Swift.Error)
}
public class NFCCard : CardReaderProviderApi.CardType {
  public init(isoTag tag: any CoreNFC.NFCISO7816Tag)
  public var atr: CardReaderProviderApi.ATR {
    get
  }
  public var `protocol`: CardReaderProviderApi.CardProtocol {
    get
  }
  public func openBasicChannel() throws -> any CardReaderProviderApi.CardChannelType
  public func openLogicChannel() throws -> any CardReaderProviderApi.CardChannelType
  public func openLogicChannelAsync() async throws -> any CardReaderProviderApi.CardChannelType
  public func initialApplicationIdentifier() throws -> Foundation.Data?
  public func disconnect(reset _: Swift.Bool) throws
  @objc deinit
  public var description: Swift.String {
    get
  }
}
public class NFCCardChannel : CardReaderProviderApi.CardChannelType {
  final public let maxMessageLength: Swift.Int
  final public let maxResponseLength: Swift.Int
  final public let channelNumber: Swift.Int
  final public let extendedLengthSupported: Swift.Bool
  public init(card: NFCCardReaderProvider.NFCCard, tag: any CoreNFC.NFCISO7816Tag, channelNo: Swift.Int = 0)
  public var card: any CardReaderProviderApi.CardType {
    get
  }
  @available(*, deprecated, message: "Use structured concurrency version instead")
  public func transmitPublisher(command: any CardReaderProviderApi.CommandType, writeTimeout _: Foundation.TimeInterval, readTimeout: Foundation.TimeInterval) throws -> any CardReaderProviderApi.ResponseType
  public func transmitAsync(command: any CardReaderProviderApi.CommandType, writeTimeout _: Foundation.TimeInterval, readTimeout _: Foundation.TimeInterval) async throws -> any CardReaderProviderApi.ResponseType
  public func closePublisher() throws
  public func closeAsync() async throws
  @objc deinit
}
public enum NFCCardError : Swift.Error {
  case nfcTag(error: NFCCardReaderProvider.CoreNFCError)
  case noCardPresent
  case transferException(name: Swift.String)
  case sendTimeout
}
public class NFCHealthCardSession<Output> : ObjectiveC.NSObject, CoreNFC.NFCTagReaderSessionDelegate {
  public init?(pollingOption: CoreNFC.NFCTagReaderSession.PollingOption = .iso14443, on queue: Dispatch.DispatchQueue = .global(qos: .userInitiated), messages: NFCCardReaderProvider.NFCHealthCardSession<Output>.Messages, can: Swift.String, operation: @escaping ((any NFCCardReaderProvider.NFCHealthCardSessionHandle) async throws -> Output))
  public func executeOperation() async throws -> Output
  @objc deinit
  public func invalidateSession(with error: Swift.String?)
  public func tagReaderSessionDidBecomeActive(_: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
public enum NFCHealthCardSessionError : Swift.Error {
  case couldNotInitializeSession
  case unsupportedTag
  case coreNFC(NFCCardReaderProvider.CoreNFCError)
  case wrongCAN
  case establishingSecureChannel(any Swift.Error)
  case operation(any Swift.Error)
}
public protocol NFCHealthCardSessionHandle {
  func updateAlert(message: Swift.String)
  func invalidateSession(with error: Swift.String?)
  var card: any HealthCardAccess.HealthCardType { get }
}
extension NFCCardReaderProvider.NFCHealthCardSession {
  public struct Messages {
    public let discoveryMessage: Swift.String
    public let connectMessage: Swift.String
    public let secureChannelMessage: Swift.String
    public let noCardMessage: Swift.String
    public let multipleCardsMessage: Swift.String
    public let unsupportedCardMessage: Swift.String
    public let connectionErrorMessage: Swift.String
    public init(discoveryMessage: Swift.String, connectMessage: Swift.String, secureChannelMessage: Swift.String, noCardMessage: Swift.String, multipleCardsMessage: Swift.String, unsupportedCardMessage: Swift.String, connectionErrorMessage: Swift.String)
  }
}
public protocol NFCCardSession {
  func updateAlert(message: Swift.String)
  func invalidateSession(with error: Swift.String?)
  var card: any CardReaderProviderApi.CardType { get }
}
extension CoreNFC.NFCTagReaderSession {
  public enum Error : Swift.Error {
    case couldNotInitializeSession
    case unsupportedTag
    case nfcTag(error: NFCCardReaderProvider.CoreNFCError)
  }
  public struct Publisher : Combine.Publisher {
    public typealias Output = NFCCardReaderProvider.NFCCardSession
    public typealias Failure = CoreNFC.NFCTagReaderSession.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == CoreNFC.NFCTagReaderSession.Error, S.Input == any NFCCardReaderProvider.NFCCardSession
  }
  public struct Messages {
    public let discoveryMessage: Swift.String
    public let connectMessage: Swift.String
    public let noCardMessage: Swift.String
    public let multipleCardsMessage: Swift.String
    public let unsupportedCardMessage: Swift.String
    public let connectionErrorMessage: Swift.String
    public init(discoveryMessage: Swift.String, connectMessage: Swift.String, noCardMessage: Swift.String, multipleCardsMessage: Swift.String, unsupportedCardMessage: Swift.String, connectionErrorMessage: Swift.String)
  }
  @available(*, deprecated, message: "Use NFCHealthCardSession instead")
  public static func publisher(for pollingOption: CoreNFC.NFCTagReaderSession.PollingOption = .iso14443, on queue: Dispatch.DispatchQueue = .global(qos: .userInitiated), messages: CoreNFC.NFCTagReaderSession.Messages) -> CoreNFC.NFCTagReaderSession.Publisher
}
